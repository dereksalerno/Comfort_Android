package com.AppliedArgonautics.comfort;



import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

import com.AppliedArgonautics.comfort.MenuItem.Liquor;

public class Parser extends DefaultHandler {

    private ArrayList<MenuItem> MenuItemL;

    public ArrayList<MenuItem> getMenuItems(){
    	return MenuItemL;
    }
    
    //InputStream liquorXmlFileName;
    
    InputStream menuItemXmlInputStream;

    String tmpValue;

    MenuItem MenuItemTmp;
    Liquor liquorTmp;
    String listType;

    //SimpleDateFormat sdf= new SimpleDateFormat("yy-MM-dd");

    public Parser(InputStream menuItemXmlInputStream, String listType) {

        this.listType = listType; 
    	
    	this.menuItemXmlInputStream = menuItemXmlInputStream;

        MenuItemL = new ArrayList<MenuItem>();

        parseDocument();

        printDatas();

    }

    private void parseDocument() {

        // parse

        SAXParserFactory factory = SAXParserFactory.newInstance();

        try {

            SAXParser parser = factory.newSAXParser();

            parser.parse(menuItemXmlInputStream, this, listType);
            
            //parser.parse(response, parser.Encoding.UTF_8,rootElement.getContentHandler());

        } catch (ParserConfigurationException e) {

            System.out.println("ParserConfig error");

        } catch (SAXException e) {

            System.out.println("SAXException : xml not well formed");

        } catch (IOException e) {

            System.out.println("IO error");

        }

    }

    private void printDatas() {

       // System.out.println(bookL.size());

        for (MenuItem tmpB : MenuItemL) {

            System.out.println(tmpB.toString());

        }

    }

    @Override

    public void startElement(String s, String s1, String elementName, Attributes attributes) throws SAXException {

        // if current element is book , create new book

        // clear tmpValue on start of element

 

        if (elementName.equalsIgnoreCase(listType)) {

            liquorTmp = new Liquor();
            

            //bookTmp.setId(attributes.getValue("id"));

            //bookTmp.setLang(attributes.getValue("lang"));

        }
        

        // if current element is publisher

        //if (elementName.equalsIgnoreCase("publisher")) {

            //bookTmp.setPublisher(attributes.getValue("country"));

        //}

    }

    @Override

    public void endElement(String s, String s1, String element) throws SAXException {

        // if end of book element add to list

        if (element.equals("item")) {

            LiquorL.add(liquorTmp);

        }

        if (element.equalsIgnoreCase("distiller")) {

            liquorTmp.setDistiller(tmpValue);

        }

        if (element.equalsIgnoreCase("bottling")) {

            liquorTmp.setBottling(tmpValue);
            liquorTmp.hasBottling = true;

        }

        if(element.equalsIgnoreCase("age")){

           liquorTmp.setAge(tmpValue);

        }

        if(element.equalsIgnoreCase("price")){

            liquorTmp.setPrice(tmpValue);

        }

        if(element.equalsIgnoreCase("proof")){

            liquorTmp.setProof(tmpValue);

        }
        
        if(element.equalsIgnoreCase("place")){

            liquorTmp.setPlace(tmpValue);

        }
        
    }

    @Override

    public void characters(char[] ac, int i, int j) throws SAXException {

        tmpValue = new String(ac, i, j);

    }

}
